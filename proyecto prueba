# Traductor de números en MIPS

.data
menu_msg: .asciiz "Seleccione una opción:\n"
option_msg: .asciiz "Opción: "
tipo_num_entrada_msg: .asciiz "Tipo de número a entrar:\n1. Binario en Complemento a 2\n2. Decimal Empaquetado\n3. Base 10\n4. Octal\n5. Hexadecimal\n"
tipo_num_salida_msg: .asciiz "Tipo de número a salir:\n1. Binario en Complemento a 2\n2. Decimal Empaquetado\n3. Base 10\n4. Octal\n5. Hexadecimal\n"
num_entrada_msg: .asciiz "Ingrese el número: "
resultado_msg: .asciiz "El resultado es: "

.text
main:
    # Imprimir menú
    la $a0, menu_msg
    li $v0, 4
    syscall

loop:
    # Leer tipo de número a entrar
    la $a0, tipo_num_entrada_msg
    li $v0, 4
    syscall
    li $v0, 5
    syscall
    move $t0, $v0

    # Leer tipo de número a salir
    la $a0, tipo_num_salida_msg
    li $v0, 4
    syscall
    li $v0, 5
    syscall
    move $t1, $v0

    # Leer número a traducir
    la $a0, num_entrada_msg
    li $v0, 4
    syscall
    li $v0, 5
    syscall
    move $t2, $v0

    # Traducir número
    beq $t0, 1, bin_a_otro
    beq $t0, 2, dec_emp_a_otro
    beq $t0, 3, base10_a_otro
    beq $t0, 4, octal_a_otro
    beq $t0, 5, hex_a_otro

    # Imprimir resultado
    la $a0, resultado_msg
    li $v0, 4
    syscall
    move $a0, $t3
    li $v0, 1
    syscall

    j loop

bin_a_otro:
    # Traducir de binario en complemento a 2 a otro tipo
    # ...
    j loop

dec_emp_a_otro:
    # Traducir de decimal empaquetado a otro tipo
    # ...
    j loop

base10_a_otro:
    # Traducir de base 10 a otro tipo
    # ...
    j loop

octal_a_otro:
    # Traducir de octal a otro tipo
    # ...
    j loop

hex_a_otro:
    # Traducir de hexadecimal a otro tipo
    # ...
    j loop